
embed-server --server-config=${STANDALONE_CONFIG}
batch

/subsystem=elytron/key-store=keystore:add( \
  path=${KEYSTORE_FILE}, \
  relative-to=jboss.server.config.dir, \
  credential-reference={ \
    clear-text=${KEYSTORE_PASSWORD} \
  }, \
  type=BCFKS, \
  required=true \
)

/subsystem=elytron/key-manager=keymanager:add( \
  key-store=keystore, \
  credential-reference={ \
    clear-text=${KEYSTORE_PASSWORD} \
  } \
)

/subsystem=elytron/key-store=truststore:add( \
  path=${TRUSTSTORE_FILE}, \
  relative-to=jboss.server.config.dir, \
  credential-reference={ \
    clear-text=${TRUSTSTORE_PASSWORD} \
  }, \
  type=BCFKS, \
  required=true \
)

# /subsystem=elytron/trust-manager=trustmanager:add( \
#   key-store=truststore, \
#   certificate-revocation-list={ \
#     path=${CRL_FILE}, \
#     relative-to=jboss.server.config.dir \
#   } \
# )

/subsystem=elytron/trust-manager=trustmanager:add( \
  key-store=truststore \
)

/subsystem=elytron/key-store-realm=truststore-realm:add( \
  key-store=truststore \
)

/subsystem=elytron/x500-attribute-principal-decoder=cert-cn-decoder:add( \
  oid="2.5.4.3", \
  maximum-segments=1 \
)

/subsystem=elytron/constant-role-mapper=constant-cert-role:add( \
  roles=[admin, guest] \
)

/subsystem=elytron/security-domain=client-cert-domain:add( \
  realms=[{ \
    realm=truststore-realm \
  }, \
  { \ 
    realm=local, \
    role-mapper=super-user-mapper \
  }], \
  default-realm=truststore-realm, \
  permission-mapper=default-permission-mapper, \
  principal-decoder=cert-cn-decoder, \
  role-mapper=constant-cert-role \
)

/subsystem=elytron/http-authentication-factory=client-cert-auth:add( \
  http-server-mechanism-factory=global, \
  security-domain=client-cert-domain, \
  mechanism-configurations=[{ \
    mechanism-name=CLIENT_CERT, \
    mechanism-realm-configurations=[{ \
      realm-name=truststore-realm \
    }] \
  }] \
) 

/subsystem=elytron/sasl-authentication-factory=client-cert-auth:add( \
  sasl-server-factory=configured, \
  security-domain=client-cert-domain, \
  mechanism-configurations=[{ \
    mechanism-name=JBOSS-LOCAL-USER, \
    mechanism-realm-configurations=[{ \
      realm-name=local \
    }] \
  }] \
)

/subsystem=elytron/server-ssl-context=ssc:add( \
  security-domain=client-cert-domain, \
  key-manager=keymanager, \
  protocols=["TLSv1.2"], \
  trust-manager=trustmanager, \
  want-client-auth=false, \
  need-client-auth=true, \
  authentication-optional=false, \
  cipher-suite-filter="DEFAULT" \
)

/core-service=management/management-interface=http-interface:write-attribute( \
  name=ssl-context, \
  value=ssc \
)

/core-service=management/management-interface=http-interface:write-attribute( \
  name=secure-socket-binding, \
  value=management-https \
)

/core-service=management/management-interface=http-interface:write-attribute( \
  name=http-authentication-factory, \
  value=client-cert-auth \
)

/core-service=management/management-interface=http-interface:write-attribute( \
  name=http-upgrade.sasl-authentication-factory, \
  value=client-cert-auth \
)

/core-service=management/management-interface=http-interface:undefine-attribute( \
  name=security-realm \
)

/core-service=management/access=identity:write-attribute( \
  name=security-domain, \
  value=client-cert-domain \
)

/subsystem=elytron/http-authentication-factory=management-http-authentication:remove

/subsystem=elytron/sasl-authentication-factory=management-sasl-authentication:remove

/subsystem=elytron/security-domain=ManagementDomain:remove

/subsystem=logging/logger=org.bouncycastle.jsse.provider:add(level=FINE)
/subsystem=logging/logger=org.bouncycastle.jsse:add(level=FINE)
/subsystem=logging/logger=org.bouncycastle.tls:add(level=FINE)
/subsystem=logging/logger=org.bouncycastle:add(level=FINE)
/subsystem=logging/logger=org.jboss.as.domain.http.api.undertow:add(level=TRACE)
/subsystem=logging/logger=org.jboss.as.domain.http.api:add(level=TRACE)
/subsystem=logging/logger=org.jboss.as.domain.http:add(level=TRACE)
/subsystem=logging/logger=org.jboss.hal.client.bootstrap:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.audit:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.auth.server:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.http.basic:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.http.bearer:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.http.cert:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.http.digest:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.http.form:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.http.password:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.http.spnego:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.anonymous:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.digest:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.entity:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.external:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.gs2:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.gssapi:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.local:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.oauth2:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.otp:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.plain:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl.scram:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.sasl:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.ssl:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.tls:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.x500.cert.acme:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security.xml:add(level=TRACE)
/subsystem=logging/logger=org.wildfly.security:add(level=TRACE)

run-batch
stop-embedded-server

